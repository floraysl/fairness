lm_AIC<-step(lm)
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(train_avg)))
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(wage)))
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(Wage)))
summary(lm_BIC)
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(Wage)))
m3 <- lm(wage~age+I(age^2)+I(age^3)+maritl+I(maritl^2)+I(maritl^3)+jobclass+I(jobclass^2)+I(jobclass^3),data=Wage)
linear_spline <- lm(wage~bs(age+maritl+jobclass,knots=c(20,50,80),degree=1),data=Wage)
####################(d)###########################
#linear regression
lm<-lm(wage~age+maritl+jobclass, data=Wage)
summary(lm)
#==========================Problem 3 ============================#
data(seatpos)
#==========================Problem 3 ============================#
library(faraway)
data(seatpos)
force(seatpos)
View(seatpos)
set.seed(1)
train_ind <- sample(1:nrow(seatpos), 0.8*nrow(seatpos))
train <- seatpos[train_ind, ]
test <- seatpos[-train_ind, ]
#(a)
knnFit2 <- train(hipcenter~., seatpos , method = "5nn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
install.packages("caret")
#(a)
library(caret)
knnFit2 <- train(hipcenter~., seatpos , method = "5nn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
knnFit2 <- train(hipcenter~., seatpos , method = "knn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
knnFit2
knnFit2 <- train(hipcenter~., train , method = "knn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
knnFit2
#(a)
library(ISLR)
library(dplyr)
library(tidyr)
library(pls)
set.seed(1)
pcr_fit = pcr(hipcenter~., data = sesatpos, scale = TRUE, validation = "CV")
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "CV")
summary(pcr_fit)
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "5CV")
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "5\CV")
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "CV")
summary(pcr_fit)
nfold <- 5
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 10, ncol = 20)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:14), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x)
+ (x- pca.i$center)/pca.i$scale )cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:14){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
} }
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:14), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:14){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:20), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:20){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:9), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:9){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
nfold <- 5
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 5, ncol = 9)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:9), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:9){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 5, ncol = 20)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:9), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:9){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:29), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:20){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:20), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:20){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:20), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:5), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:5), sep="")
df$y <- train[infold != i,]$hipcenter
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$hipcenter)^2)
}
}
apply(cv.error, 2, mean)
which.min(apply(cv.error, 2, mean))
#aic
c <- regsubsets(hipcenter ~ ., data=seatpos)
summary(lm_AIC)
#aic
lm<-lm(hipcenter~.,data=seatpos)
lm_AIC<-step(lm)
#aic
lm<-lm(hipcenter~.,data=seatpos)
lm_AIC_seat<-step(lm)
#aic
lm_seat<-lm(hipcenter~.,data=seatpos)
lm_AIC_seat<-step(lm)
summary(lm_AIC_seat)
q()
#AIC
X<-seatpos[,1:8]
#==========================Problem 3 ============================#
library(faraway)
data(seatpos)
set.seed(1)
train_ind <- sample(1:nrow(seatpos), 0.8*nrow(seatpos))
train <- seatpos[train_ind, ]
test <- seatpos[-train_ind, ]
#(a)
library(ISLR)
library(dplyr)
library(tidyr)
library(pls)
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
PCA<-prcomp(X)
PCA
#AIC
X<-seatpos[,1:10]
X<-scale(X,center=TRUE, scale=TRUE)
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
PCA<-prcomp(X)
PCA
df<-data.frame(PCA$x)
names(df) <- seatspos$hiscenter
pclm<-lm(y~. data=df)
names(df) <- seatpos$hiscenter
pclm<-lm(y~. data=df)
pclm<-lm(y~. ,data=df)
pclm<-lm(y~.,data=df)
pclm<-lm(y~PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8,data=df)
df<-data.frame(PCA$x)
names(df) <- paste("PC",seq(1:8),sep="")
df$y<-seatpos$hiscenter
pclm<-lm(y~., data=df)
df$y<-seatpos$hipcenter
pclm<-lm(y~., data=df)
pclm_AIC<-step(pclm)
summary(pclm_AIC)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV",ncomp=5)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV",ncomp=6)
pcr_pred_AIC<- predict(pcr_fit, test, ncomp=6)
pcr_pred_CV<- predict(pcr_fit, test, ncomp=6)
mean((pcr_pred_CV-test)^2)
mean((pcr_pred_CV-test$hipcenter)^2)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV",ncomp=6)
pcr_pred_CV<- predict(pcr_fit, test[,-9], ncomp=6)
mean((pcr_pred_CV-test$hipcenter)^2)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE,ncomp=6)
pcr_pred_CV<- predict(pcr_fit, test[,-9], ncomp=6)
mean((pcr_pred_CV-test$hipcenter)^2)
######(c)#####
####PCR with 5-CV
pcr_CV <- pcr(hipcenter~., data = train,scale =TRUE, validation = "CV")
pcr_pred_CV <- predict(pcr_CV, test, ncomp = 6)
mean((pcr_pred_CV - y_test)^2)
mean((pcr_pred_CV - test$hipcenter)^2)
pcr_pred_CV <- predict(pcr_CV, newdata=test, ncomp = 6)
mean((pcr_pred_CV - test$hipcenter)^2)
#==========================Problem 3 ============================#
library(faraway)
data(seatpos)
set.seed(1)
train_ind <- sample(1:nrow(seatpos), 0.8*nrow(seatpos))
train <- seatpos[train_ind, ]
test <- seatpos[-train_ind, ]
######(a)#####
library(ISLR)
library(dplyr)
library(tidyr)
library(pls)
#5-cv
nfold <- 5
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 5, ncol = 20)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:5), sep="")
df$y <- train[infold != i,]$hipcenter
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$hipcenter)^2)
}
}
apply(cv.error, 2, mean)
which.min(apply(cv.error, 2, mean))
######(c)#####
####PCR with 5-CV
pcr_CV <- pcr(hipcenter~., data = train,scale =TRUE, validation = "CV")
pcr_pred_CV <- predict(pcr_CV, newdata=test, ncomp = 6)
mean((pcr_pred_CV - test$hipcenter)^2)
install.packages("stepPlr")
library(stepPlr)
######(b)#####
x_b<-as.matrix(seatpos[,-9])
y_b<-as.vector(seatpos[,9])
cv.step.plr(x, y, weights = rep(1, length(y)),nfold = 5,)
cv.step.plr(x_b, y_b, weights = rep(1, length(y)),nfold = 5,)
cv.step.plr(x_b, y_b, weights = rep(1, length(y_b)),nfold = 5,)
######(b)#####
set.seed(1)
pls_fit = plsr(hipcenetr~., data = train, scale = TRUE, validation = "CV")
pls_fit = plsr(hipcenterr~., data = train, scale = TRUE, validation = "CV")
pls_fit = plsr(hipcenter~., data = train, scale = TRUE, validation = "CV")
summary(pls_fit)
validationplot(pls_fit, val.type = "MSEP")
pls_fit = plsr(hipcenter~., data = train, scale = TRUE, validation = "AIC")
cv.step.plr(x_b, y_b, cp = "aic")
?prcomp
######(b)#####
#aic
y <- train$hipcenter
pls.object<-pls.ic(train.x,y,m=ncol(train.x), criterion = "aic")
pls.object$m.opt
library(pls)
library(stepPlr)
pls.object<-pls.ic(train.x,y,m=ncol(train.x), criterion = "aic")
install.packages("plsdof")
######(b)#####
#aic
library(plsdof)
pls.object<-pls.ic(train.x,y,m=ncol(train.x), criterion = "aic")
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
pls.object<-pls.ic(X,train$hipcenter,m=ncol(X), criterion = "aic")
pls.object<-pls.ic(X,train$hipcenter,m=ncol(X), criterion = "aic")
pls.object<-pls.ic(X,y,m=ncol(X), criterion = "aic")
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
######(b)#####
#aic
library(plsdof)
y <- train$hipcenter
pls.object<-pls.ic(X,y,m=ncol(X), criterion = "aic")
Y <- train$hipcenter
pls.object<-pls.ic(X,Y,m=ncol(X), criterion = "aic")
pls.object<-pls.ic(X,Y,m = min(ncol(X),nrow(X)-1), criterion = "aic")
pls.object<-pls.ic(Y,X,m = min(ncol(X),nrow(X)-1), criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(X), criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(Y), criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(X)+1, criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(X), criterion = "aic")
pls.object<-pls.ic(Y,X, criterion = "aic")
pls.object<-pls.ic(X,Y criterion = "aic")
pls.object<-pls.ic(X,Y, criterion = "aic")
pls.object<-pls.ic(Y,X, criterion = "aic")
############Section 11 - ANOVA############
#######Two-level Example
library(faraway)
data(sexab)
force(sexab)
View(sexab)
by(sexab,sexab$csa,summary)
# t-test for the difference between these two group: abused and not-abused
attach(sexab)
t.test(ptsd[csa == "Abused", ptsd[csa == "NotAbused"]])
t.test(ptsd[csa == "Abused"], ptsd[csa == "NotAbused"])
#summary plots
plot(ptsd~csa,sexab)
plot(ptsd~cpa, pch = as.character(csa), sexab)
##Interactions between csa and cpa
g <- lm(ptsd~ csa+cpa+cpa:csa, sexab)
summary(g)
##remove interaction effect (not signif)
g2 <- lm(ptsd~ csa+cpa, sexab)
summary(g2)
##add regression line
plot(ptsd~cpa, pch = as.character(csa))
abline(10.248,0.5506) #cpa and abused
abline(10.248-6.2728,0.5506) # cpa + not abused
abline(10.248-6.2728,0.5506,lty = 2) # cpa + not abused
abline(10.248-6.2728,0.5506,lty = 2) # cpa + not abused
abline(10.248,0.5506) #cpa and abused
abline(10.248-6.2728,0.5506,lty = 2) # cpa + not abused
##add regression line
plot(ptsd~cpa, pch = as.character(csa))
abline(10.248,0.5506) #cpa and abused
abline(10.248-6.2728,0.5506,lty = 2) # cpa + not abused
#diagnostics
plot(fitted(g2), residual(g2), pch = as.charater(csa), xlab = "Fitted", ylab = "Residaul")
#diagnostics
plot(fitted(g2), residual(g2), pch = as.charater(csa), xlab = "Fitted", ylab = "Residual")
#diagnostics
plot(fitted(g2), residuals(g2), pch = as.charater(csa), xlab = "Fitted", ylab = "Residual")
#diagnostics
plot(fitted(g2), residuals(g2), pch = as.charater(csa), xlab = "Fitted", ylab = "Residual")
#diagnostics
plot(fitted(g2), residuals(g2), pch = as.character(csa), xlab = "Fitted", ylab = "Residual")
#####Multi-level coding
data(nel88)
#####Multi-level coding
data(nels88)
view(nels88)
View(nels88)
###fit the model with ses and paredu(paredu has six factors)
g3<- lm(math~ses*paredu,nels88)
summary(g3)
###anova(f-test is general)
anova(g3)
###refit withot interaction
gb<-lm(math~ses+paredu, nels88)
summary(gb)
###One-way ANOVA
data(coagulation)
force(coagulation)
View(coagulation)
#plot
par(mfrow = c(1,2))
plot(coag~diet, ,coagulation)
plot(coag~diet ,coagulation)
stripchart(coagulation$coag~coagulation$diet,method = "stack")
##fit the model
g4<- lm(coag~diet, coagulation)
summary(g)
##fit the model
g4<- lm(coag~diet, coagulation)
summary(g)
##fit the model
g5<- lm(coag~diet, coagulation)
summary(g)
###One-way ANOVA
data(coagulation)
##fit the model
g5<- lm(coag~diet, coagulation)
summary(g)
q()
arsim<-function(phis, sigsq, T){
p<-length(phis) #find the number of lags in our AR
noise<-rnorm(T+p, sd=sqrt(sigsq)) #generate the white noise plus a few to get started
x<-c(noise[1:p],rep(0,T)) #put the initial noise terms in and set the rest to zero
for (i in (p+1):(T+p)){ #this loop generates the AR series with the recursive formula
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
x<-x[(p+1):(T+p)] #throw away those initial starting points
x #return
}
x1<-arsim(c(0.5), 1,200)
par(mfrow=c(2,1))
plot.ts(x1,main="TS Plot of AR(1), phi=0.5, 200 Observations")
acf(x1,main="Corresponding ACF Plot")
x2<-arsim(c(-0.5), 1,200)
par(mfrow=c(2,1))
plot.ts(x2,main="TS Plot of AR(1), phi=-0.5, 200 Observations")
acf(x2,main="Corresponding ACF Plot")
x3<-arsim(c(1.1), 1,200)
par(mfrow=c(2,1))
plot.ts(x3,main="TS Plot of AR(1), phi=1.1, 200 Observations")
acf(x3,main="Corresponding ACF Plot")
q()
View(cv.scale)
setwd("~/Desktop/fairness")
library(foreign)
library(haven)
library(ggplot2)
db = file.choose()
fairness<-read.spss(db, to.data.frame = TRUE)
#Frequancy Histogram
as.factor(fairness$StudyID)
fairness_split<-split(fairness, fairness$StudyID)
#studyid=3
count_3_pre<-fairness_split$`3`[,c(6:9,11:14,16:19,21:24)]
count_3<-as.data.frame(table(unlist(count_3_pre)))
bar_3<-barplot(count_3$Freq,names.arg=count_3$Var1,xlab="Choices",ylab="Frequency",col="orange",
main="Frequance of Choices ",sub = "(6 years old)")
#studyid=4
count_4_pre<-fairness_split$`4`[,c(6:9,11:14,16:19,21:24)]
count_4<-as.data.frame(table(unlist(count_4_pre)))
bar_4<-barplot(count_4$Freq,names.arg=count_4$Var1,xlab="Choices",ylab="Frequency",col="orange",
main="Frequance of Choices ",sub = "(3 and 4 years old)")
View(count_4)
